generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?

  // Relações
  topics        Topic[]
  comments      Comment[]
  topicLikes    TopicLike[]   
  commentLikes  CommentLike[]
  savedTopics   SavedTopic[] 
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id        String  @id @default(uuid())
  title     String
  descricao String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug      Int      @unique @default(autoincrement())

  // Relações
  comments  Comment[]
  likes     TopicLike[] 
  savedBy   SavedTopic[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String  @id @default(uuid())
  descricao String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  likes     CommentLike[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedTopic {
  id        String   @id @default(uuid())
  savedAt   DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)  
  
  @@unique([userId, topicId])
}

model TopicLike {
  id      String  @id @default(uuid())
  userId  String
  topicId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, topicId])
}

model CommentLike {
  id        String  @id @default(uuid())
  userId    String
  commentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 